name: Cross-compile Python 3.13.7 for ARMv7l BusyBox

on:
  workflow_dispatch: # 允许手动触发

jobs:
  cross_compile:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 运行器上执行

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 检出仓库代码

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3 # 设置 QEMU 以支持多架构 Docker 镜像

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # 设置 Docker Buildx

      - name: Prepare cross-compilation environment
        id: prepare_env
        run: |
          # 定义目标架构和工具链前缀
          TARGET_ARCH=armv7l-linux-gnueabi
          HOST_ARCH=arm-linux-gnueabi
          PYTHON_VERSION=3.13.7
          INSTALL_PREFIX=/ # 容器内的安装路径，最终会打包

          # 创建一个临时的 Dockerfile 来构建交叉编译环境
          cat <<EOF > Dockerfile.cross
          FROM ubuntu:latest

          # 更新包列表并安装必要的工具和交叉编译工具链
          RUN apt-get update && apt-get install -y --no-install-recommends \\
              build-essential \\
              curl \\
              tar \\
              xz-utils \\
              # Python 编译依赖
              libgmp-dev \\
              libmpc-dev \\
              libmpfr-dev \\
              libffi-dev \\
              libssl-dev \\
              libbz2-dev \\
              zlib1g-dev \\
              # 用户要求的模块依赖
              libsqlite3-dev \\
              libncurses-dev \\
              libreadline-dev \\
              # 其他库
              libgdbm-dev \\
              libexpat-dev \\
              libbluetooth-dev \\
              # 交叉编译工具链 (arm-linux-gnueabi 用于软浮点)
              gcc-arm-linux-gnueabi \\
              g++-arm-linux-gnueabi \\
              binutils-arm-linux-gnueabi \\
              libc6-dev-arm-cross \\
              # 确保所有依赖都安装
              pkg-config

          # 设置环境变量，方便后续编译
          ENV PATH="/usr/arm-linux-gnueabi/bin:$PATH"
          ENV CC="arm-linux-gnueabi-gcc"
          ENV CXX="arm-linux-gnueabi-g++"
          ENV AR="arm-linux-gnueabi-ar"
          ENV RANLIB="arm-linux-gnueabi-ranlib"
          ENV LD="arm-linux-gnueabi-ld"
          ENV READELF="arm-linux-gnueabi-readelf"
          ENV STRIP="arm-linux-gnueabi-strip"
          # 添加 --sysroot 指向目标系统的根目录，这是交叉编译的关键
          ENV CFLAGS="-Os -mfloat-abi=softfp -march=armv7-a -mfpu=vfpv3-d16 --sysroot=/usr/arm-linux-gnueabi"
          ENV CXXFLAGS="-Os -mfloat-abi=softfp -march=armv7-a -mfpu=vfpv3-d16 --sysroot=/usr/arm-linux-gnueabi"
          ENV LDFLAGS="-Wl,-rpath-link=/usr/arm-linux-gnueabi/lib -static --sysroot=/usr/arm-linux-gnueabi"
          EOF

          # 构建 Docker 镜像
          docker build -t cross-compile-python -f Dockerfile.cross .

          echo "PYTHON_VERSION=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
          echo "INSTALL_PREFIX=${INSTALL_PREFIX}" >> $GITHUB_OUTPUT
          echo "HOST_ARCH=${HOST_ARCH}" >> $GITHUB_OUTPUT
          echo "TARGET_ARCH=${TARGET_ARCH}" >> $GITHUB_OUTPUT

      - name: Download Python source
        run: |
          PYTHON_VERSION=${{ steps.prepare_env.outputs.PYTHON_VERSION }}
          curl -LO "https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz"
          tar -xf "Python-${PYTHON_VERSION}.tar.xz"

      - name: Cross-compile Python
        run: |
          PYTHON_VERSION=${{ steps.prepare_env.outputs.PYTHON_VERSION }}
          INSTALL_PREFIX=${{ steps.prepare_env.outputs.INSTALL_PREFIX }}
          HOST_ARCH=${{ steps.prepare_env.outputs.HOST_ARCH }}
          TARGET_ARCH=${{ steps.prepare_env.outputs.TARGET_ARCH }}

          docker run --platform linux/arm/v7 \
            -v "$(pwd)/Python-${PYTHON_VERSION}:/src" \
            -v "$(pwd)/build:/build" \
            cross-compile-python /bin/sh -c "
            cd /src && \
            ./configure \
              --host=${HOST_ARCH} \
              --build=x86_64-linux-gnu \
              --prefix=${INSTALL_PREFIX} \
              --disable-shared \
              --with-build-python=yes \
              ac_cv_file__dev_ptmx=no \
              ac_cv_file__dev_ptc=no \
              --without-gdbm \
              --without-tcl \
              --without-tk \
              # 针对 BusyBox 的一些特殊处理
              LDFLAGS='-static -Wl,-rpath-link=/usr/arm-linux-gnueabi/lib --sysroot=/usr/arm-linux-gnueabi' \
              CPPFLAGS='-I/usr/arm-linux-gnueabi/include --sysroot=/usr/arm-linux-gnueabi' \
              CFLAGS='-Os -mfloat-abi=softfp -march=armv7-a -mfpu=vfpv3-d16 --sysroot=/usr/arm-linux-gnueabi' \
              CXXFLAGS='-Os -mfloat-abi=softfp -march=armv7-a -mfpu=vfpv3-d16 --sysroot=/usr/arm-linux-gnueabi' && \
            make -j$(nproc) && \
            make install DESTDIR=/build
            "

      - name: Package compiled Python
        run: |
          PYTHON_VERSION=${{ steps.prepare_env.outputs.PYTHON_VERSION }}
          # 将 /build 目录下的所有内容打包
          cd build
          tar -czvf "python-${PYTHON_VERSION}-armv7l-busybox.tar.gz" .
          mv "python-${PYTHON_VERSION}-armv7l-busybox.tar.gz" ../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-${{ steps.prepare_env.outputs.PYTHON_VERSION }}-armv7l-busybox
          path: python-${{ steps.prepare_env.outputs.PYTHON_VERSION }}-armv7l-busybox.tar.gz
          retention-days: 7 # 保留 7 天
